# 工作流程名稱
name: IELTS AI Feedback

# 觸發條件：當 issue 被關閉時執行
on:
  issues:
    types: [closed]

# 定義工作
jobs:
  milestone-feedback:
    # 運行的虛擬機環境
    runs-on: ubuntu-latest
    # 設定權限，允許 action 讀取 issue 內容並寫入留言
    permissions:
      issues: write

    steps:
      # 第一步：產生 AI 回饋
      - name: Generate AI Feedback
        id: ai_feedback
        env:
          # 將 issue body 和 API key 作為環境變數傳入，更安全且易於管理
          ISSUE_BODY: ${{ github.event.issue.body }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # 印出執行的每一行指令
          set -x
          
          # 從 ISSUE_BODY 中提取所有圖片 URL
          # 使用 grep 和 Perl 正規表達式來精準匹配 src 屬性中的 URL
          IMAGE_URLS=$(echo "$ISSUE_BODY" | grep -oP '<img\s+[^>]*?src="\K[^"]*')
          
          echo "---[DETECTED IMAGE URLS]---"
          echo "$IMAGE_URLS"
          echo "---[END DETECTED IMAGE URLS]---"
          
          # 將文字部分從 ISSUE_BODY 中分離出來，用於傳送給 AI
          PROMPT_TEXT=$(echo "$ISSUE_BODY" | sed -r 's/<img[^>]*>//g' | sed -r 's/^[[:space:]]*//' | sed '/^$/d')
          
          # 建立一個陣列來儲存 API 請求的內容部分
          PARTS_ARRAY="[]"
          
          # 將處理後的文字作為第一部分加入陣列
          PARTS_ARRAY=$(echo "$PARTS_ARRAY" | jq --arg text "$PROMPT_TEXT" '. + [{"text": $text}]')
          
          # 檢查是否有圖片 URL，並逐一下載和編碼
          if [ -n "$IMAGE_URLS" ]; then
            for URL in $IMAGE_URLS; do
              echo "Downloading image from: $URL"
              # 下載圖片到臨時檔案，並跟隨重定向
              TEMP_IMAGE_FILE=$(mktemp)
              curl -s -L -o "$TEMP_IMAGE_FILE" "$URL"
              
              # 【修正】檢查下載的檔案大小
              # 如果檔案太小（小於100位元組），很可能不是圖片，而是錯誤訊息，我們就跳過它
              FILE_SIZE=$(stat -c%s "$TEMP_IMAGE_FILE")
              
              if [ "$FILE_SIZE" -gt 100 ]; then
                echo "File size is ${FILE_SIZE} bytes. Proceeding with encoding."
                # 編碼臨時檔案的內容
                BASE64_DATA=$(base64 -w 0 "$TEMP_IMAGE_FILE")
                
                if [ -n "$BASE64_DATA" ]; then
                  # 建立圖片部分的 JSON 物件
                  IMAGE_PART=$(jq -n --arg data "$BASE64_DATA" '{"inlineData": {"mimeType": "image/jpeg", "data": $data}}')
                  
                  # 將圖片部分加入陣列
                  PARTS_ARRAY=$(echo "$PARTS_ARRAY" | jq '. + ['"$IMAGE_PART"']')
                  
                else
                  echo "Failed to encode image from: $URL"
                fi
              else
                echo "Downloaded file from $URL is too small (${FILE_SIZE} bytes), likely an error. Skipping."
              fi
              
              # 清理臨時檔案
              rm "$TEMP_IMAGE_FILE"
            done
          fi
          
          # 建立完整的 JSON payload
          # 【最終修正】將 parts 陣列正確地巢狀到 contents 陣列中
          JSON_PAYLOAD=$(jq -n \
            --argjson parts "$PARTS_ARRAY" \
            '{
              "systemInstruction": {
                "parts": [
                  {
                    "text": "你是一位專業的雅思教練。請針對剛完成的雅思寫作任務，參考圖片內容，給予簡潔、精準且具體的正向回饋，並提出一到兩點明確的改進方向，格式要清晰易讀。"
                  }
                ]
              },
              "contents": [
                {
                  "parts": $parts
                }
              ]
            }')
          
          echo "---[JSON PAYLOAD]---"
          echo "$JSON_PAYLOAD"
          echo "---[END JSON PAYLOAD]---"

          # 更新模型名稱為 gemini-2.5-flash-preview-05-20 以支援圖片分析
          API_RESPONSE=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${GEMINI_API_KEY}" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            -w "\n%{http_code}")
            
          HTTP_CODE=$(echo "$API_RESPONSE" | tail -n1)
          API_RESPONSE=$(echo "$API_RESPONSE" | head -n -1)

          echo "---[FULL API RESPONSE]---"
          echo "$API_RESPONSE"
          echo "---[END FULL API RESPONSE]---"
          echo "HTTP Status Code: $HTTP_CODE"

          feedback=$(echo "$API_RESPONSE" | jq -r '.candidates[0].content.parts[0].text')
          
          if [ "$HTTP_CODE" -ne 200 ] || [ -z "$feedback" ] || [ "$feedback" = "null" ]; then
            echo "從 API 獲取回饋失敗，HTTP Status Code: $HTTP_CODE"
            feedback="抱歉，AI 教練目前無法提供回饋，請稍後再試。請檢查你的 API 金鑰或網路連線。"
          fi

          echo "---[PARSED FEEDBACK]---"
          echo "$feedback"
          echo "---[END PARSED FEEDBACK]---"

          echo "feedback<<EOF" >> "$GITHUB_OUTPUT"
          echo "$feedback" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      # 第二步：將 AI 回饋留言到 issue
      - name: Post AI feedback to the issue
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            ---
            ### 🎉 任務完成！AI 專案教練回饋：
            
            ${{ steps.ai_feedback.outputs.feedback }}
            ---